{% extends 'OroLayoutBundle:Layout:div_layout.html.twig' %}

{% block datagrid_widget %}
    {% set grid_render_parameters = {
        viewLoading: true
    }|merge(grid_render_parameters) %}
    {% if split_to_cells != false %}
        {% set themeOptions = grid_render_parameters.themeOptions|default({}) %}
        {% set themeOptions = layout_attr_defaults(themeOptions, {
            'headerRowTemplateSelector': '#template-datagrid-header-row',
            'rowTemplateSelector': '#template-datagrid-row'
        }) %}
        {% set toolbarOptions = grid_render_parameters.toolbarOptions|default({}) %}
        {% set toolbarOptions = layout_attr_defaults(toolbarOptions, {
            'columnManager': {'addSorting': false}
        }) %}
        {% set grid_render_parameters = grid_render_parameters|merge({
            'themeOptions': themeOptions,
            'toolbarOptions': toolbarOptions
        }) %}
        {{ block("container_widget") }}
    {% endif %}
    {% import 'OroDataGridBundle::macros.html.twig' as dataGrid %}
    {{ dataGrid.renderGrid(grid_full_name, grid_parameters, grid_render_parameters) }}
{% endblock %}

{% block block_attributes_underscore %}
    {% import 'OroFrontendBundle:layouts/default:utils.html.twig' as utils %}
    {{ utils.underscoreRaw(block('block_attributes_base')) }}
{%- endblock %}

{% block form_start_widget %}
    {% if attr.id is not defined %}
        {% set attr = attr|merge({
            id: form.vars.id
        }) %}
    {% endif %}
    {{ parent() }}
{% endblock %}

{% block form_end_widget %}
    {{ parent() }}
    {{ oro_form_js_validation(form, js_validation_options|default({})) }}
{% endblock %}

{#Action Buttons#}

{% block action_line_buttons_widget %}
    {% import 'OroActionBundle:layouts/base:layout.html.twig' as _layout %}
    <ul{{ block('block_attributes') }}>
        {% for action in actions %}
            <li>
                <a {{ _layout.get_action_attributes(action, entityClass, entityId) }}>
                    {% if action.icon is not empty %}
                        <i class="{{ action.icon }} {{ action.buttonOptions.iCss|default('') }}"></i>
                    {% endif %}
                    {{ action.label|trim }}
                </a>
            </li>
        {% endfor %}
    </ul>
{% endblock %}

{% block action_combined_buttons_widget %}
    {% set actionsCount = actions|length %}
    {% if actionsCount > 0 %}
        {% import 'OroActionBundle:layouts/base:layout.html.twig' as _layout %}
        {% set hasVariants = actionsCount > 1 %}
        {% set additionalCss = "btn" %}
        {% if block.parent.vars.class_prefix == 'datagrid_toolbar_button_container' %}
            {% set additionalCss = additionalCss ~ " btn-info oq-group-btn" %}
        {% else %}
            {% set additionalCss = additionalCss ~ " btn" %}
        {% endif %}
        {% if hasVariants %}
            {% set additionalCss = " btn-group full" %}
        {% endif %}
        {% set attr = attr|merge({ class: attr.class|default('') ~ additionalCss}) %}

        {% set action = actions|first %}
        {% set primaryButtonCss = ' btn btn--action btn--size-s direct-link ' ~ action.buttonOptions.class|default('') ~ " "  ~ params.buttonOptions.aCss|default('') %}

        {% if hasVariants %}
            {% set dropdownMenuOptions = {
                'align': 'right',
                'attachToParent': true
            } %}

            <div{{ block('block_attributes') }}>
                <a class="btn btn--info btn--size-l" {{ _layout.get_action_attributes(action, entityClass, entityId, primaryButtonCss) }}>
                    {{ action.label|trim }}
                </a>
                <a class="btn btn--info btn--size-l dropdown-toggle" href="#" data-toggle="dropdown" aria-haspopup="true" aria-expanded="true"></a>
                <ul class="dropdown-menu" data-options={{ dropdownMenuOptions|json_encode }}>
                    {% for action in actions|slice(1) %}
                    <li>
                        <a class="dropdown-item" {{ _layout.get_action_attributes(action, entityClass, entityId, '') }}>
                            {{ action.label|trim }}
                        </a>
                    </li>
                    {% endfor %}
                </ul>
            </div>
        {% else %}
            <a {{ _layout.get_action_attributes(action, entityClass, entityId, primaryButtonCss) }}>
                {{ action.label|trim }}
            </a>
        {% endif %}

    {% endif %}
{% endblock %}

{#Buttons#}

{% block line_buttons_widget %}
    {% import 'OroActionBundle:layouts/base:layout.html.twig' as _layout %}
    <ul{{ block('block_attributes') }}>
        {% for button in buttons %}
            <li>
                {% include button.template with button.templateData|merge({onlyLink: true, noIconText: true}) %}
            </li>
        {% endfor %}
    </ul>
{% endblock %}

{% block combined_buttons_widget %}
    {% set dropdownActionClass = dropdownActionClass|default('btn btn--info btn--size-l direct-link') %}
    {% set dropdownToggleClass = dropdownToggleClass|default('btn btn--info btn--size-l dropdown-toggle') %}
    {% set dropdownItemClass = dropdownItemClass|default('dropdown-item') %}
    {% set actionButtonClass = actionButtonClass|default('btn btn--action btn--size-s direct-link') %}

    {% set buttonsCount = buttons|length %}
    {% if buttonsCount > 0 %}
        {% import 'OroActionBundle:layouts/base:layout.html.twig' as _layout %}
        {% set hasVariants = buttonsCount > 1 %}

        {% set button = buttons|first %}

        {% if hasVariants %}
            {% set additionalCss = "btn" %}
            {% if block.parent.vars.class_prefix == 'datagrid_toolbar_button_container' %}
                {% set additionalCss = additionalCss ~ " btn--info oq-group-btn " %}
            {% endif %}
            {% if hasVariants %}
                {% set additionalCss = " btn-group full " %}
            {% endif %}
            {% set attr = attr|merge({ class: attr.class|default('') ~ additionalCss}) %}
            {% set dropdownMenuOptions = {
                'align': 'right',
                'attachToParent': true
            } %}

            <div{{ block('block_attributes') }}>


                {% include button.template with button.templateData|merge({onlyLink: true, aClass: dropdownActionClass, noIcon: true, noIconText: true}) %}

                <a href="#" class="{{ dropdownToggleClass }}" data-toggle="dropdown" data-container="body" aria-haspopup="true" aria-expanded="true"></a>

                <ul class="dropdown-menu" data-options={{ dropdownMenuOptions|json_encode }}>
                    {% for button in buttons|slice(1) %}
                        <li>
                            {% include button.template with button.templateData|merge({onlyLink: true, aClass: dropdownItemClass, noIcon: true, noIconText: true}) %}
                        </li>
                    {% endfor %}
                </ul>
            </div>
        {% else %}
            {% include button.template with button.templateData|merge({onlyLink: true, aClass: actionButtonClass, noIcon: true, noIconText: true}) %}
        {% endif %}
    {% endif %}
{% endblock %}

{% block button_widget %}
    {% if style|default('') == 'auto' %}
        {% if action == 'submit' %}
            {% set style = 'btn--info' %}
        {% else %}
            {% set style = action == 'reset' ? 'btn--action' : '' %}
        {% endif %}
    {% endif %}
    {% if style is not defined %}
        {% set add_class = '' %}
    {% else %}
        {% set add_class = 'btn ' ~ style %}
    {% endif %}
    {% set attr = attr|merge({
        class: attr.class|default('') ~ add_class
    }) %}
    {{ parent() }}
{% endblock %}

{% block icon_block -%}
    <i class="fa-{{ icon }}{% if icon_class is defined %} {{ icon_class }}{% endif %}"></i>
{%- endblock %}

{% block back_link_widget %}
    <div class="order-builder-clear-btn">
        {{ block_widget(block) }}
    </div>
{% endblock %}

{% block input_widget %}
    {% if type == 'checkbox' %}
        {% set attr = layout_attr_defaults(attr, {
        '~class': ' custom-checkbox__input'
        }) %}

        <label {% if attr.id is not empty %} for="{{ attr.id }}" {% endif %} class="custom-checkbox">
            {{ parent() }}
            <span class="custom-checkbox__icon"></span>
            <span class="custom-checkbox__text">{{ label|block_text(translation_domain) }} </span>
        </label>
    {% else %}
        {% set attr = layout_attr_defaults(attr, {
        '~class': ' input'
        }) %}

        {{ parent() }}
    {% endif %}
{% endblock %}

{% block embedded_list_widget %}
    <div class="embedded-list">
        {% set attr = layout_attr_defaults(attr, {
            'class': 'embedded-list__container'
        }) %}

        {% if use_slider %}
            {% set attr = layout_attr_defaults(attr, {
                'data-page-component-module': 'orofrontend/js/app/components/list-slider-component',
                '~data-page-component-options': slider_options,
                '~class': ' embedded-list__container--slider'
            }) %}
        {% else %}
            {% set attr = layout_attr_defaults(attr, {
                '~class': ' embedded-list__container--tiles'
            }) %}
        {% endif %}

        {% if label is defined %}
            <h2 class="embedded-list__label">
                <span class="embedded-list__label-inner">{{ label|trans }}</span>
            </h2>
        {% endif %}

        <div {{ block('block_attributes') }}>
            {% for item in items %}
                <div class="embedded-list__item">
                    {% set context = {
                        (item_key): item
                    } %}
                    {% for dataKey, dataValue in items_data %}
                        {% set context = context|merge({
                            (dataKey): dataValue[item.id]|default(null)
                        }) %}
                    {% endfor %}
                    {% do block|merge_context(context) %}
                    {{ block('container_widget') }}
                </div>
            {% endfor %}
        </div>
    </div>
{% endblock %}
